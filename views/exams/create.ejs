<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="<%= csrfToken %>">
    <title>Créer un Examen - Evalio</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="/css/style.css">
    <style>
        :root {
            --primary-blue: #1a73e8;
            --primary-orange: #ff6b35;
            --light-orange: #fff3e6;
        }
        body {
            background-color: #f8f9fa;
        }
        .card {
            border: none;
            border-radius: 15px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .card-header {
            background: linear-gradient(135deg, var(--primary-blue), #0d47a1);
            color: white;
            border-radius: 15px 15px 0 0 !important;
            padding: 1.5rem;
        }
        .form-control {
            border-radius: 8px;
            border: 1px solid #e0e0e0;
            padding: 0.75rem;
        }
        .form-control:focus {
            border-color: var(--primary-orange);
            box-shadow: 0 0 0 0.2rem rgba(255, 107, 53, 0.25);
        }
        .btn-primary {
            background: var(--primary-blue);
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        .btn-primary:hover {
            background: #1557b0;
            transform: translateY(-2px);
        }
        .btn-secondary {
            background: #f8f9fa;
            color: var(--primary-blue);
            border: 2px solid var(--primary-blue);
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        .btn-secondary:hover {
            background: var(--primary-blue);
            color: white;
        }
        .form-label {
            font-weight: 500;
            color: #2c3e50;
        }
        .form-check-input:checked {
            background-color: var(--primary-orange);
            border-color: var(--primary-orange);
        }
        .alert {
            border-radius: 8px;
        }
    </style>
</head>
<body>
    <%- include('../partials/header') %>

    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h3 class="text-center mb-0"><i class="fas fa-file-alt me-2"></i>Créer un Nouvel Examen</h3>
                    </div>
                    <div class="card-body p-4">
                        <% if (typeof error !== 'undefined') { %>
                            <div class="alert alert-danger" role="alert">
                                <i class="fas fa-exclamation-circle me-2"></i><%= error %>
                            </div>
                        <% } %>
                        <form action="/api/exams" method="POST" id="examForm">
                            <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                            <div class="mb-4">
                                <label for="title" class="form-label">Titre de l'Examen</label>
                                <input type="text" class="form-control" id="title" name="title" required>
                            </div>
                            <div class="mb-4">
                                <label for="description" class="form-label">Description</label>
                                <textarea class="form-control" id="description" name="description" rows="3" required></textarea>
                            </div>
                            <div class="row mb-4">
                                <div class="col-md-6">
                                    <label for="duration" class="form-label">Durée (minutes)</label>
                                    <input type="number" class="form-control" id="duration" name="duration" min="1" required>
                                </div>
                                <div class="col-md-6">
                                    <label for="passingScore" class="form-label">Score de Réussite (%)</label>
                                    <input type="number" class="form-control" id="passingScore" name="passingScore" min="0" max="100" required>
                                </div>
                            </div>
                            <div class="row mb-4">
                                <div class="col-md-6">
                                    <label for="startDate" class="form-label">Date de Début</label>
                                    <input type="date" class="form-control" id="startDate" name="startDate" required>
                                </div>
                                <div class="col-md-6">
                                    <label for="startTime" class="form-label">Heure de Début</label>
                                    <input type="time" class="form-control" id="startTime" name="startTime" required>
                                </div>
                            </div>
                            <div class="row mb-4">
                                <div class="col-md-6">
                                    <label for="endDate" class="form-label">Date de Fin</label>
                                    <input type="date" class="form-control" id="endDate" name="endDate" required>
                                </div>
                                <div class="col-md-6">
                                    <label for="endTime" class="form-label">Heure de Fin</label>
                                    <input type="time" class="form-control" id="endTime" name="endTime" required>
                                </div>
                            </div>
                            <div class="mb-4">
                                <label class="form-label">Types de Questions</label>
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" id="multipleChoice" name="questionTypes" value="multipleChoice" checked>
                                    <label class="form-check-label" for="multipleChoice">Choix Multiples</label>
                                </div>
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" id="trueFalse" name="questionTypes" value="trueFalse">
                                    <label class="form-check-label" for="trueFalse">Vrai/Faux</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="shortAnswer" name="questionTypes" value="shortAnswer">
                                    <label class="form-check-label" for="shortAnswer">Réponse Courte</label>
                                </div>
                            </div>
                            <div class="d-grid gap-3">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-save me-2"></i>Créer l'Examen
                                </button>
                                <a href="/dashboard" class="btn btn-secondary">
                                    <i class="fas fa-arrow-left me-2"></i>Retour au Tableau de Bord
                                </a>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <%- include('../partials/footer') %>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.getElementById('examForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            // Show loading state
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalBtnText = submitBtn.innerHTML;
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Création en cours...';
            
            try {
                // Get the date and time values
                const startDate = document.getElementById('startDate').value;
                const startTime = document.getElementById('startTime').value;
                const endDate = document.getElementById('endDate').value;
                const endTime = document.getElementById('endTime').value;
                
                // Create the exam data
                const examData = {
                    title: document.getElementById('title').value,
                    description: document.getElementById('description').value,
                    duration: parseInt(document.getElementById('duration').value),
                    passingScore: parseInt(document.getElementById('passingScore').value),
                    startDateTime: `${startDate}T${startTime}`,
                    endDateTime: `${endDate}T${endTime}`,
                    questionTypes: Array.from(document.querySelectorAll('input[name="questionTypes"]:checked')).map(cb => cb.value)
                };

                // Get CSRF token from either meta tag or hidden input
                const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || 
                                document.querySelector('input[name="_csrf"]')?.value;

                if (!csrfToken) {
                    throw new Error('CSRF token not found. Please refresh the page and try again.');
                }

                const response = await fetch('/api/exams', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrfToken
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(examData)
                });

                const data = await response.json();

                if (!response.ok) {
                    throw new Error(data.error || 'Erreur lors de la création de l\'examen');
                }

                // Show success message
                const successAlert = document.createElement('div');
                successAlert.className = 'alert alert-success';
                successAlert.innerHTML = '<i class="fas fa-check-circle me-2"></i>Examen créé avec succès! Redirection...';
                this.insertBefore(successAlert, this.firstChild);

                // Redirect after a short delay
                setTimeout(() => {
                    window.location.href = `/exams/${data.exam.id}/questions`;
                }, 1500);

            } catch (error) {
                console.error('Error:', error);
                // Show error message
                const errorAlert = document.createElement('div');
                errorAlert.className = 'alert alert-danger';
                errorAlert.innerHTML = `<i class="fas fa-exclamation-circle me-2"></i>${error.message}`;
                this.insertBefore(errorAlert, this.firstChild);

                // Reset button state
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalBtnText;
            }
        });

        // Set minimum date to today
        const today = new Date().toISOString().split('T')[0];
        document.getElementById('startDate').min = today;
        document.getElementById('endDate').min = today;

        // Update end date minimum when start date changes
        document.getElementById('startDate').addEventListener('change', function() {
            document.getElementById('endDate').min = this.value;
        });
    </script>
</body>
</html> 